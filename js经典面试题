参考资料：
https://blog.csdn.net/liuxing393724034/article/details/83506977
https://www.cnblogs.com/youhong/p/6899466.html

1、涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。
  function Foo(){
     getName = function (){
          alert(1);
      }
      return this;
  }

  Foo.getName = function(){
      alert(2);
  }
  Foo.prototype.getName = function(){
      alert(3);
  }
  var getName = function(){
      alert(4);
  }

  function getName(){
      alert(5);
  }

  //请写出以下输出结果
  Foo.getName();           //2
  getName();                   //4
  Foo().getName();         //1
  getName();                   //1
  new Foo.getName();    //2
  new Foo().getName();    //3
  new new Foo().getName();  //3
 
 2、如果出现多个一逗号为间隔的判断依据，则以分号前的最后一项为准。
  for(i=0, j=0; i<4, j<6; i++, j++){
   k = i + j;
  }
  console.log(k); //10
  
  3、词法作用域让fun()中的a通过RHS引用到了全局作用域中的a，因此会输出1
  function fun() {
 　　console.log( a );
　　}
　　function bar() {
　　var a = 0;
　　fun();
　　}
　　var a = 1;
　　bar(); //1
  
 4、浅析jQuery基本结构($实现原理)、js实现链式操作
 
 5、基本类型值的传递如同基本类型变量的复制一样，而引用类型值的传递，则如同引用类型变量的复制一样。访问变量有按值和按引用两种方式，而参数只能按值传递。
 function changeObjectProperty (o) {
                o.siteUrl = "http://www.csser.com/";
                o = new Object();   
                o.siteUrl = "http://www.popcg.com/";
            }
            var CSSer = new Object(); 
            changeObjectProperty(CSSer);
            console.log(CSSer.siteUrl); //打印http://www.csser.com/
   
   6、闭包、作用域
   
   var buttons = [{name:'b1'},{name:'b2'},{name:'b3'}];
            function bind(){
                for (var i = 0; i < buttons.length; i++) {
                   buttons[i].onclick = function() {
                       console.log(i);
                   }
                }
            };
            bind();
            buttons[0].onclick();//3
            buttons[1].onclick();//3
            buttons[2].onclick();//3          
            
  var buttons = [{name:'b1'},{name:'b2'},{name:'b3'}];
               function bind(){
                  for (var i = 0; i < buttons.length; i++) {
                      buttons[i].onclick = (function (i){
                         console.log(i)
                      }(i));
                  }
               };
                bind();
               buttons[0].onclick;//0
               buttons[1].onclick;//1
               buttons[2].onclick;//2
 
 
