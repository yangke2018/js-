参考资料:
https://www.cnblogs.com/jnslove/p/7028487.html
https://www.cnblogs.com/goloving/p/9297019.html
https://www.cnblogs.com/Grace-zyy/p/8206002.html
https://www.cnblogs.com/annika/p/9073572.html
https://www.jianshu.com/p/294fc924a284

一、概念
  什么是面向对象编程（OOP）？用对象的思想去写代码，就是面向对象编程。

二、特点
  抽象：抓住核心问题
  封装：只能通过对象来访问方法
  继承：从已有对象上继承出新的对象
  多态：多对象的不同形态
  
三、new的作用
  1、创建一个新对象：

  var obj = {};

  2、设置新对象的constructor属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的prototype对象；

  obj.__proto__ = ClassA.prototype;

  3、使用新对象调用函数，函数中的this被指向新实例对象：
  ClassA.call(obj);　　//{}.构造函数()
  
  4、将初始化完毕的新对象地址，保存到等号左边的变量中

  5、优先级由高到低：小括号(xxx)  >  属性访问.   >  new foo()  >  foo()
  
 四、创建对象
    1、工厂方式（面向对象中的封装函数）
    function createPerson(name){
      var obj = new Object();
      obj.name = name;
      obj.showName = function(){
          alert( this.name );
      };

      return obj;    
     }
    var p1 = createPerson('小明');
    p1.showName();
    var p2 = createPerson('小强');
    p2.showName();

    优点：传递参数
    缺点：无法识别对象类型 （由于创建对象都是使用Object的原生构造函数来实现的）
    
    2、构造函数模式(给一个对象添加方法)
    //new 后面调用的函数叫构造函数
    function CreatePerson(name){
      this.name=name;
      this.showName=function(){
          alert(this.name);
      }
    }
    var p1=new CreatePerson('小明');//当new去调用一个函数时，函数中的this就是创建出来的对象而函数中的返回值就是this
    p1.showName();
    var p2=new CreatePerson('小强');
    p2.showName();
    
    缺点：创建对象时，每个对象都有一套自己的方法
    
    3、原型模式(prototype、给一类对象添加方法)
      原型：类比css中的class
      普通方法：类比css中的style
      
 
五、面向对象中this的问题 

  一般会出现问题的情况有两种：
  定时器： 定时器中this指向window
  事件
  
六、原型链
  1、对象
    普通对象：
      最普通的对象：有__proto__属性（指向其原型链），没有prototype属性。
      原型对象(person.prototype 原型对象还有constructor属性（指向构造函数对象）)
      
    函数对象 ：凡是通过new Function()创建的都是函数对象
      拥有__proto__、prototype属性（指向原型对象）。
      Function、Object、Array、Date、String、自定义函数
      特例： Function.prototype(是原型对象，却是函数对象，下面会有解释)
      
   2、关系
   
   构造函数 <--(constructor) 原型对象 <--( _proto_ ) 实例对象
   
   3、原型链
   
   原型链是实现继承的主要方法。

七、js继承的6种方式
  父类：
  fuction Person(name){
    this.name = name; 
    this.sum = function(){
      console.log(this.name)
    }
   Person.prototype.age= 10
   } 
   
   1、原型继承
   
       function Per(){
        this.name= 'Ker'
       }
       Per.prototype = new Person()
       ver per1 = new Per()
       重点：让新实例的原型等于父类的实例。
       特点：1)、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）
       缺点：1)、新实例无法向父类构造函数传参。
            2)、继承单一。
            3)、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）
   
   2、借用构造函数继承
   
       fuction Con(){
        Person.call(this.'jer')//重点
        this.age = 12
       }
       var con1 = new Con()
       console.log(con1 instanceof Person) // false
       重点：用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））

　　　　特点：1)、只继承了父类构造函数的属性，没有继承父类原型的属性。

　　　　　　　2)、解决了原型链继承缺点1、2、3。

　　　　　　　3)、可以继承多个构造函数属性（call多个）。

　　　　　　　4)、在子实例中可向父实例传参。

　　　　缺点：1)、只能继承父类构造函数的属性。

　　　　　　　2)、无法实现构造函数的复用。（每次用每次都要重新调用）

　　　　　　　3)、每个新实例都有父类构造函数的副本，臃肿。
       
     3、组合继承（组合原型链继承和借用构造函数继承）（常用）
    
        function SubType(name){
            Person.call(this,name)
        }
        SubType.prototype = new Person();
        var sub = SubType('gar')
        console.log(sub.name)
        console.log(sub.age)
        
        重点：结合了两种模式的优点，传参和复用

　　　　 特点：1、可以继承父类原型上的属性，可以传参，可复用。

　　　　　　　 2、每个新实例引入的构造函数属性是私有的。

　　　　 缺点：调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。
    
    4、原型式继承
    
        function content(obj){
            function F(){}
            F.prototype=obj
            return new F()
        }
        var sub = new Person()
        var sub1 = content(sub);
        console.log(sub1.age)//10
        
        重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。

        特点：类似于复制一个对象，用函数来包装。

        缺点：1）、所有实例都会继承原型上的属性。

             2）、无法实现复用。（新实例属性都是后面添加的）
             
     5、寄生式继承
     
        function content(obj){
            function F(){}
            F.prototype=obj
            return new F()
        }
        var sup = new Person()
        function subobject(obj){
          var  sub = content(obj);
          sub.name = 'gar';
          retrun sub
        }
        var sup2 = subobject(sup);
        
        重点：就是给原型式继承外面套了个壳子。

        优点：没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。

        缺点：没用到原型，无法复用。
        
        
      6、寄生组合式继承（常用）
      寄生：在函数内返回对象然后调用
      组合：1）函数的原型等于另一个实例。
           2) 在函数中用apply或者call引入另一个构造函数，可传参　
           
      function content(obj){
            function F(){}
            F.prototype=obj
            return new F()
        }
      var con = content(Person.prototype) //只继承了原型属性
      //组合
      function Sub(){
        Person.Call(this)//继承父类构造函数属性
      }
      //重点
      Sub.prototype = con; //继承con实例
      con.constuctor = Sub; //一定要修复实例
      var sub1 = Sub();
      console.log(sub1.age) // 10
        
      重点：修复了组合继承的问题   
      
      7、es6 class 继承
        class Colorpoint extends Point {
        constructor(x,y,color){
          super(x,y); //调用父类的constructor(x,y)
          this.color = color
        }
        toString(){
          //调用父类的方法
          return this.color + ' ' + super.toString(); 
        }
        }
      
        
        
    
    
    

  
      
      
  

