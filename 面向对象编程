参考资料:
https://www.cnblogs.com/jnslove/p/7028487.html
https://www.cnblogs.com/goloving/p/9297019.html

一、概念
  什么是面向对象编程（OOP）？用对象的思想去写代码，就是面向对象编程。

二、特点
  抽象：抓住核心问题
  封装：只能通过对象来访问方法
  继承：从已有对象上继承出新的对象
  多态：多对象的不同形态
  
三、new的作用
  1、创建一个新对象：

  var obj = {};

  2、设置新对象的constructor属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的prototype对象；

  obj.__proto__ = ClassA.prototype;

  3、使用新对象调用函数，函数中的this被指向新实例对象：
  ClassA.call(obj);　　//{}.构造函数()
  
  4、将初始化完毕的新对象地址，保存到等号左边的变量中

  5、优先级由高到低：小括号(xxx)  >  属性访问.   >  new foo()  >  foo()
  
 四、创建对象
    1、工厂方式（面向对象中的封装函数）
    function createPerson(name){
      var obj = new Object();
      obj.name = name;
      obj.showName = function(){
          alert( this.name );
      };

      return obj;    
     }
    var p1 = createPerson('小明');
    p1.showName();
    var p2 = createPerson('小强');
    p2.showName();

    优点：传递参数
    缺点：无法识别对象类型 （由于创建对象都是使用Object的原生构造函数来实现的）
    
    2、构造函数模式(给一个对象添加方法)
    //new 后面调用的函数叫构造函数
    function CreatePerson(name){
      this.name=name;
      this.showName=function(){
          alert(this.name);
      }
    }
    var p1=new CreatePerson('小明');//当new去调用一个函数时，函数中的this就是创建出来的对象而函数中的返回值就是this
    p1.showName();
    var p2=new CreatePerson('小强');
    p2.showName();
    
    缺点：创建对象时，每个对象都有一套自己的方法
    
    3、原型模式(prototype、给一类对象添加方法)
      原型：类比css中的class
      普通方法：类比css中的style
      
 
五、面向对象中this的问题 

  一般会出现问题的情况有两种：
  定时器： 定时器中this指向window
  事件
  
六、原型链
  1、对象
    普通对象：
      最普通的对象：有__proto__属性（指向其原型链），没有prototype属性。
      原型对象(person.prototype 原型对象还有constructor属性（指向构造函数对象）)
      
    函数对象 ：凡是通过new Function()创建的都是函数对象
      拥有__proto__、prototype属性（指向原型对象）。
      Function、Object、Array、Date、String、自定义函数
      特例： Function.prototype(是原型对象，却是函数对象，下面会有解释)
      
   2、关系
   
   构造函数 <--(constructor) 原型对象 <--( _proto_ ) 实例对象
   
   3、原型链
   
   原型链是实现继承的主要方法。

      
      
  

